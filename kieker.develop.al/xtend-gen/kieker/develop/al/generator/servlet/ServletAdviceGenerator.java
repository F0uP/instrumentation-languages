package kieker.develop.al.generator.servlet;

import de.cau.cs.se.geco.architecture.framework.IGenerator;
import kieker.develop.al.aspectLang.Advice;
import kieker.develop.al.aspectLang.Collector;
import kieker.develop.al.aspectLang.InsertionPoint;
import kieker.develop.al.generator.CommonJavaTemplates;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class ServletAdviceGenerator implements IGenerator<Advice, CharSequence> {
  @Override
  public CharSequence generate(final Advice input) {
    CharSequence _xblockexpression = null;
    {
      final boolean traceAPI = CommonJavaTemplates.isTraceAPIUsed(input);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package ");
      String _packageName = CommonJavaTemplates.getPackageName(input);
      _builder.append(_packageName, "");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("import java.io.IOException;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import javax.servlet.Filter;");
      _builder.newLine();
      _builder.append("import javax.servlet.FilterChain;");
      _builder.newLine();
      _builder.append("import javax.servlet.FilterConfig;");
      _builder.newLine();
      _builder.append("import javax.servlet.ServletException;");
      _builder.newLine();
      _builder.append("import javax.servlet.ServletRequest;");
      _builder.newLine();
      _builder.append("import javax.servlet.ServletResponse;");
      _builder.newLine();
      _builder.append("import javax.servlet.http.HttpServletRequest;");
      _builder.newLine();
      _builder.append("import javax.servlet.http.HttpSession;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import kieker.monitoring.core.controller.IMonitoringController;");
      _builder.newLine();
      _builder.append("import kieker.monitoring.core.controller.MonitoringController;");
      _builder.newLine();
      _builder.append("import kieker.monitoring.core.registry.SessionRegistry;");
      _builder.newLine();
      _builder.append("import kieker.monitoring.core.registry.TraceRegistry;");
      _builder.newLine();
      _builder.append("import kieker.monitoring.probe.IMonitoringProbe;");
      _builder.newLine();
      _builder.append("import kieker.monitoring.timer.ITimeSource;");
      _builder.newLine();
      _builder.newLine();
      EList<Collector> _collectors = input.getCollectors();
      String _createRecordInputs = CommonJavaTemplates.createRecordInputs(_collectors);
      _builder.append(_createRecordInputs, "");
      _builder.newLineIfNotEmpty();
      {
        if (traceAPI) {
          _builder.append("import kieker.common.record.flow.trace.TraceMetadata;");
        }
      }
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("public class ");
      String _name = input.getName();
      _builder.append(_name, "");
      _builder.append("Filter implements Filter, IMonitoringProbe {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("/** constant for a property name. */");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static final String CONFIG_PROPERTY_NAME_");
      String _name_1 = input.getName();
      String _upperCase = _name_1.toUpperCase();
      _builder.append(_upperCase, "\t");
      _builder.append(" = \"");
      String _name_2 = input.getName();
      _builder.append(_name_2, "\t");
      _builder.append("\";");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/** Kieker monitoring controller. */");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protected static final IMonitoringController CTRLINST = MonitoringController.getInstance();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/** Kieker session registry. */");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protected static final SessionRegistry SESSION_REGISTRY = SessionRegistry.INSTANCE;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/** Kieker time source. */");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protected static final ITimeSource TIMESOURCE = CTRLINST.getTimeSource();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/** Host name of the host the code is running on. TODO this must be optional */");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protected static final String VM_NAME = CTRLINST.getHostname();");
      _builder.newLine();
      _builder.append("\t");
      {
        if (traceAPI) {
          _builder.append("/** Kieker trace registry. */");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("private static final TraceRegistry TRACEREGISTRY = TraceRegistry.INSTANCE;");
        }
      }
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Create an SessionAndTraceRegistrationFilter and initialize the filter operation signature.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public ");
      String _name_3 = input.getName();
      _builder.append(_name_3, "\t");
      _builder.append("Filter() {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("// nothing to be done here at the moment.");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void init(final FilterConfig config) throws ServletException {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// the filter does not need any initialization at the time.");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// Just fulfilling API");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* Register thread-local session and trace information, executes the given {@link FilterChain} and unregisters");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* the session/trace information. If configured, the execution of this filter is also logged to the {@link IMonitoringController}.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* This method returns immediately if monitoring is not enabled.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* @param request");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*            The request.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* @param response");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*            The response.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* @param chain");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*            The filter chain to be used.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* @throws IOException");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*             on io errors");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* @throws ServletException");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*             on servlet errors");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (CTRLINST.isMonitoringEnabled()) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if (CTRLINST.isProbeActivated(this.filterOperationSignatureString)) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("// TODO declare properties here");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("String query;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("// TODO determination of request types");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if (request instanceof HttpServletRequest) {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("final HttpServletRequest httpRequest = (HttpServletRequest) request;");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("method = httpRequest.getMethod();");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("path = httpRequest.getRequestURI().replace(\'/\', \'.\').substring(1);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("sessionId = httpRequest.getSession().getId();");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("query = httpRequest.getQueryString();");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("if (query == null) {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("query = \"\";");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("method = \"POST\";");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("path = request.getServletContext().getContextPath().replace(\'/\', \'.\').substring(1);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("sessionId = \"<no session>\";");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("query = \"\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("componentSignature = path.replaceAll(\"\\\\.[A-Za-z0-9]*$\", \"\");");
      _builder.newLine();
      {
        if (traceAPI) {
          _builder.append("\t\t\t\t");
          _builder.append("TraceMetadata trace = TRACEREGISTRY.getTrace();");
          _builder.newLine();
          _builder.append("\t\t\t\t");
          _builder.append("final boolean newTrace = trace == null;");
          _builder.newLine();
          _builder.newLine();
          _builder.append("\t\t\t\t");
          _builder.append("if (newTrace) {");
          _builder.newLine();
          _builder.append("\t\t\t\t");
          _builder.append("\t");
          _builder.append("SESSION_REGISTRY.storeThreadLocalSessionId(sessionId);");
          _builder.newLine();
          _builder.append("\t\t\t\t");
          _builder.append("\t");
          _builder.append("trace = TRACEREGISTRY.registerTrace();");
          _builder.newLine();
          _builder.append("\t\t\t\t");
          _builder.append("\t");
          _builder.append("CTRLINST.newMonitoringRecord(trace);");
          _builder.newLine();
          _builder.append("\t\t\t\t");
          _builder.append("}");
          _builder.newLine();
        }
      }
      _builder.append("\t\t\t\t");
      _builder.append("// TODO clean this up");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("if (\"GET\".equals(method)) {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("operationSignature = path + \"(\" + query.replace(\';\', \':\') + \")\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("} else if (\"POST\".equals(method)) {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("operationSignature = path + \"()\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("chain.doFilter(request, response);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("return;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      {
        if (traceAPI) {
          _builder.append("final long traceId = trace.getTraceId();");
        }
      }
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("try {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      CharSequence _createEventRecording = CommonJavaTemplates.createEventRecording(input, InsertionPoint.BEFORE);
      _builder.append(_createEventRecording, "\t\t\t\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t\t");
      _builder.append("chain.doFilter(request, response);");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      CharSequence _createEventRecording_1 = CommonJavaTemplates.createEventRecording(input, InsertionPoint.AFTER);
      _builder.append(_createEventRecording_1, "\t\t\t\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("} catch (final Throwable th) { // NOPMD NOCS (catch throw is ok here)");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      CharSequence _createEventRecording_2 = CommonJavaTemplates.createEventRecording(input, InsertionPoint.AFTER_EXCEPTION);
      _builder.append(_createEventRecording_2, "\t\t\t\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("throw new ServletException(th);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("} finally {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("// is this correct?");
      _builder.newLine();
      {
        if (traceAPI) {
          _builder.append("\t\t\t\t\t");
          _builder.append("SESSION_REGISTRY.unsetThreadLocalSessionId();");
          _builder.newLine();
          _builder.append("\t\t\t\t\t");
          _builder.append("// Reset the thread-local trace information");
          _builder.newLine();
          _builder.append("\t\t\t\t\t");
          _builder.append("if (newTrace) { // close the trace");
          _builder.newLine();
          _builder.append("\t\t\t\t\t");
          _builder.append("\t");
          _builder.append("TRACEREGISTRY.unregisterTrace();");
          _builder.newLine();
          _builder.append("\t\t\t\t\t");
          _builder.append("}");
        }
      }
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("chain.doFilter(request, response);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("return;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("chain.doFilter(request, response);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void destroy() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// by default, we do nothing here. Extending classes may override this method");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* If the given {@link ServletRequest} is an instance of {@link HttpServletRequest}, this");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* methods extracts the session ID and registers it in the {@link #SESSION_REGISTRY} in order");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* to be accessible for other probes in this thread. In case no session is associated with");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* this request (or if the request is not an instance of {@link HttpServletRequest}), this");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* method returns without any further actions and returns");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* {@link kieker.common.record.controlflow.OperationExecutionRecord#NO_SESSION_ID}.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* @param request");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*            The request.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* @return The session ID.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("protected String registerSessionInformation(final ServletRequest request) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("String sessionId = TraceMetadata.NO_SESSION_ID;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if ((request == null) || !(request instanceof HttpServletRequest)) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return sessionId;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("final HttpSession session = ((HttpServletRequest) request).getSession(false);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (session != null) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("sessionId = session.getId();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("SESSION_REGISTRY.storeThreadLocalSessionId(sessionId);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return sessionId;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
}
