/*
 * generated by Xtext 2.25.0
 */
package kieker.develop.al.ide;

import com.google.inject.Guice
import kieker.develop.al.AspectLangRuntimeModule
import kieker.develop.al.AspectLangStandaloneSetup
import org.eclipse.xtext.util.Modules2
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.emf.ecore.resource.Resource

/**
 * Initialization support for running Xtext languages as language servers.
 */
class AspectLangIdeSetup extends AspectLangStandaloneSetup {

	override createInjector() {
		return Guice.createInjector(Modules2.mixin(new AspectLangRuntimeModule(), new AspectLangIdeModule()));
	}
	
	def static doSetup() {
		if (inj === null) {
			inj = new AspectLangIdeSetup().createInjectorAndDoEMFRegistration()
		} else if (inj.getInstance(AspectLangIdeModule) !== null) {
			inj = new AspectLangIdeSetup().createInjectorAndDoEMFRegistration()
		}
		return inj
	}
	
	def static doLSSetup() {
		return AspectLangIdeSetup.doSetup
	}
	
	override createInjectorAndDoEMFRegistration() {
		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl())
		super.createInjectorAndDoEMFRegistration()
		val inj = createInjector();
		register(inj);
		return inj;
		
	}
		
}
